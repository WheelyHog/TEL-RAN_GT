## Какую  роль играет БД/СУБД
============================================
		- хранение данных

Чем отличается БД от СУБД?
* БД (DB) - данные как таковые
		- структурированный набор данных, предназначенный для 
		- автоматизированной обработки
* СУБД (DBMS) - напр., MYSQL, MongoDB
		прикладное ПО 

Виды СУБД
		- первичная (primary) (основные данные) MySQL 
		- вторичная (secondary) (кеширование) Redis

## Модели данных 
============================================
Это способ описания (структурирования) данных
		- реляционная (табличная) - MySQL, PostgresQL, MS SQL Server
		- документная - MongoDB

Как правило, в проектировании (архитектуре) БД используется подход:
		- одна сущность (один объект) => одна запись в БД


## Степени автоматизация (обработки данных)
============================================

Основная задача любого разработчика - АВТОМАТИЗАЦИЯ БИЗНЕС ПРЦЕССОВ

		- ручная обработка (без автоматизации )
		- автоматизированная обработка (с участием человека)
		- автоматическая обработка (без участия человека)

## Способы подключения к СУБД
============================================
		- из командного кода (целевой) => Java, Python, JavaScript, PHP ...
		- с помощью GUI/CLI-клиентов => MySQL, WorkBench

Что такое "стек" проекта?
	Набор технологий (инструментов), используемых в проекте
		- Java / Python
		- SpringBoot / Flask
		- MySQL / MongoDB
		- и т.д.

## Работа с MySQL
============================================
select * from customers;
select  	=> прочитать данные 
 * 				=> проекция 
from 			=> из
customers => таблицы 

# Категории операций:
		- CRUD (базовые операции)
		- Agregation (получение вычесленных данных)

SQL использует скалярное хранение данных (единичное)

		- цели проекции - снижение нагрузки на вычислительные ресурсы

## Объединение таблиц с помощью оператора JOIN
=============================================
JOIN выполняет горизонтальное Объединение

SELECT 
	t1.ProductName, t1.Price, t2.SupplierName 
FROM Products t1 
JOIN Suppliers t2 ON t1.SupplierID=t2.SupplierID;

(INNER) JOIN	- считается условно "небезопасный" (показывает только при полном совпадении)

SELECT t1.ProductName, t1.Price, t2.Country FROM Products t1 
JOIN Suppliers t2 ON t1.SupplierID=t2.SupplierID

LEFT JOIN 		- считается условно "безопасный". за главную берется певая таблица
(при отсутсвии совпадения покажет null во второй таблице)
RIGHT JOIN		- отражение LEFT
FULL JOIN			- отображается несовпадение в обоих таблицах